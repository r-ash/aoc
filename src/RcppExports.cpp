// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fuel_required
int fuel_required(std::vector<int> masses);
RcppExport SEXP _aoc_fuel_required(SEXP massesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type masses(massesSEXP);
    rcpp_result_gen = Rcpp::wrap(fuel_required(masses));
    return rcpp_result_gen;
END_RCPP
}
// fuel_recursive
int fuel_recursive(int mass);
RcppExport SEXP _aoc_fuel_recursive(SEXP massSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type mass(massSEXP);
    rcpp_result_gen = Rcpp::wrap(fuel_recursive(mass));
    return rcpp_result_gen;
END_RCPP
}
// fuel_and_fuel_mass_required
int fuel_and_fuel_mass_required(std::vector<int> masses);
RcppExport SEXP _aoc_fuel_and_fuel_mass_required(SEXP massesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type masses(massesSEXP);
    rcpp_result_gen = Rcpp::wrap(fuel_and_fuel_mass_required(masses));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aoc_fuel_required", (DL_FUNC) &_aoc_fuel_required, 1},
    {"_aoc_fuel_recursive", (DL_FUNC) &_aoc_fuel_recursive, 1},
    {"_aoc_fuel_and_fuel_mass_required", (DL_FUNC) &_aoc_fuel_and_fuel_mass_required, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_aoc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
